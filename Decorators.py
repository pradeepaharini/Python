# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G1X4HgLR28I4z9eKdPhr0wlm3NZ2sJ5C
"""

#Code author: Pradeepa Harini B

import time

# Decorator to log function start time and end time
def log_to_file(func):
    def wrapper(*args, **kwds):
        with open("function_log.txt", "a") as f:
            f.write("Function started..\n")
        result = func(*args, **kwds)
        with open("function_log.txt", "a") as f:
            f.write("Function ended...\n")
        return result  # Moved outside the 'with' block
    return wrapper

# Decorator to clock function time
def clock_function(func):
    def wrapper(*args, **kwds):
        start_time = time.time()
        result = func(*args, **kwds)
        end_time = time.time()
        execution_time = end_time - start_time
        with open("function_log.txt", "a") as f:
            f.write(f"Function took {execution_time:.6f} for the execution...\n")
        return result
    return wrapper

# Cascaded Decorators: log first, then clock function
@clock_function
@log_to_file
def average(*args: int) -> float | None:
    if not args:
        return None
    return sum(args) / len(args)

# Now let's test the decorated function
c = average(5, 5, 5, 5, 5) + average(10, 10)
print(f"The value of c is {c}")

d = average(4,-4)
print(f"The value of d is {d}")